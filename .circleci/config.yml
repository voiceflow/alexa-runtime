version: 2.1

parameters:
  npm-repo:
    type: string
    default: "@voiceflow/alexa-runtime"
  container-image-url:
    type: string
    default: "168387678261.dkr.ecr.us-east-1.amazonaws.com/alexa"
  k8s-asset:
    type: string
    default: "deployment/alexa-runtime"
  k8s-namespace:
    type: string
    default: "voiceflow-v1" # This is usually voiceflow-v1
  ssh-fingerprint:
    type: string
    default: "31:42:5a:4e:ee:42:40:e6:77:fc:d4:1b:9f:4e:ca:46"
  track-component:
    type: string
    default: "alexa-runtime"

# Reusable YAML chunks
defaults:
  prod_deploy_filters: &prod_deploy_filters
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /^v[0-9]*(\.[0-9]*)*$/

  ignore_autorebase_staging_filters: &ignore_autorebase_staging_filters
    branches:
      ignore:
        - /rebase-pull-request-.*/
        - /cherry-pick-rebase-pull-request-.*/
        - staging

  slack-fail-post-step: &slack-fail-post-step
    post-steps:
      - vfcommon/notify_slack:
          channel: dev_general
          event: fail
          mentions: "@eng_integrations"
          template: basic_fail_1
          branch_pattern: master

orbs:
  vfcommon: voiceflow/common@0.0.138
  sonarcloud: sonarsource/sonarcloud@1.0.2

jobs:

  e2e-check:
    executor: vfcommon/code-test-executor
    steps:
      - checkout
      - vfcommon/install_node_modules
      - run:
          name: Install tools
          command: |
            MKCERT_VERSION="v1.4.0"
            DOCKERIZE_VERSION="v0.6.1"

            sudo apt update
            sudo apt install -y nginx postgresql-client wget libnss3-tools apt-transport-https ca-certificates curl gnupg-agent software-properties-common

            wget https://github.com/FiloSottile/mkcert/releases/download/$MKCERT_VERSION/mkcert-$MKCERT_VERSION-linux-amd64
            chmod +x mkcert-$MKCERT_VERSION-linux-amd64
            sudo mv mkcert-$MKCERT_VERSION-linux-amd64 /usr/local/bin/mkcert
            mkcert -install

            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - setup_vf_dbs:
          github_username: GITHUB_USERNAME
          github_token: GITHUB_TOKEN
          commit: DEFAULT_COMMIT
      - vfcommon/setup_vf_service:
          service_name: server-data-api
          github_username: GITHUB_USERNAME
          github_token: GITHUB_TOKEN

      - vfcommon/setup_vf_service:
          service_name: server-data-api
          github_username: GITHUB_USERNAME
          github_token: GITHUB_TOKEN
      - run:
          name: Check e2e
          command: |
            yarn gen-certs:e2e
            yarn e2e&

            dockerize -wait tcp://localhost:8012 -timeout 1m

  test:
    executor: vfcommon/code-test-executor
    steps:
      - checkout
      - vfcommon/install_node_modules
      - vfcommon/setup_dynamodb
      - vfcommon/lint_source
      - vfcommon/lint_report
      - vfcommon/lint_dockerfile
      - vfcommon/dependency_tests:
          step_name: Dependency Tests
      - vfcommon/build
      - vfcommon/unit_tests
      - vfcommon/integration_tests
      # temp steps
      - vfcommon/install_aws_cli
      - vfcommon/clone_s3_assets:
          from: s3://com.voiceflow.ci.assets/alexa
          to: ~/project/tests/smoke/recordedSessions
      - vfcommon/smoke_tests
      - sonarcloud/scan

  build-push-image:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/build_push_image:
          image_repo: << pipeline.parameters.container-image-url >>
          release_pkg: << pipeline.parameters.npm-repo >>

  post-image-push-actions:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/post_image_push_actions:
          namespace: << pipeline.parameters.k8s-namespace >>
          target: << pipeline.parameters.k8s-asset >>
          tagged: true

  update-track:
    executor: vfcommon/build-executor
    steps:
      - vfcommon/update_track:
          image_repo: << pipeline.parameters.container-image-url >>
          component: << pipeline.parameters.track-component >>

# When should each job run and what are their dependencies?
workflows:
  # Update tracks, avoiding tags
  update-track:
    jobs:
      - update-track:
          context: dev-test
          filters:
            tags:
              ignore: /.*/

  # Master (production)
  test-and-release-app:
    jobs:
      - e2e-check:
          <<: *slack-fail-post-step
          context: dev-test
          filters:
            <<: *ignore_autorebase_staging_filters
      - test:
          <<: *slack-fail-post-step
          context: dev-test
          filters:
            <<: *ignore_autorebase_staging_filters
          requires:
            - e2e-check

      - vfcommon/release:
          <<: *slack-fail-post-step
          context: dev-test
          requires:
            - test
          filters:
            branches:
              only: master

  deploy-app:
    jobs:
      - build-push-image:
          <<: *prod_deploy_filters
          context: dev-test
      - post-image-push-actions:
          <<: *prod_deploy_filters
          context: dev-test
          requires:
            - build-push-image
